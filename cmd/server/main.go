package main

import (
	"context"
	"errors"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	// –°–ª–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
	"wallpaper-system/internal/infrastructure/config"
	"wallpaper-system/internal/infrastructure/database"
	"wallpaper-system/internal/infrastructure/server"

	// –°–ª–æ–π –∞–¥–∞–ø—Ç–µ—Ä–æ–≤
	"wallpaper-system/internal/adapters/controllers"
	"wallpaper-system/internal/adapters/repositories"

	// –°–ª–æ–π –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
	"wallpaper-system/internal/usecases"

	"github.com/gin-contrib/cors"
	"github.com/gin-gonic/gin"
	"go.uber.org/zap"
)

// @title Wallpaper System API
// @version 2.0
// @description API –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ–º –æ–±–æ–µ–≤ "–ù–∞—à –¥–µ–∫–æ—Ä" —Å —á–∏—Å—Ç–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
// @termsOfService http://swagger.io/terms/

// @contact.name API Support
// @contact.url http://www.swagger.io/support
// @contact.email support@swagger.io

// @license.name MIT
// @license.url https://opensource.org/licenses/MIT

// @host localhost:8080
// @BasePath /api/v1

func main() {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	cfg := config.Load()

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º Gin –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
	if os.Getenv("APP_ENV") == "production" {
		gin.SetMode(gin.ReleaseMode)
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä
	logger, err := zap.NewDevelopment()
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–≥–µ—Ä–∞: %v", err)
	}
	defer logger.Sync()

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä
	zap.ReplaceGlobals(logger)
	sugar := logger.Sugar()

	sugar.Infow("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å —á–∏—Å—Ç–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π",
		"name", "Wallpaper System",
		"version", "2.0.0",
		"environment", os.Getenv("APP_ENV"),
	)

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (—Å–ª–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã)
	db, err := database.New(&cfg.Database)
	if err != nil {
		sugar.Fatalw("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", "error", err)
	}
	defer db.Close()

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ (—Å–ª–æ–π –∞–¥–∞–ø—Ç–µ—Ä–æ–≤)
	productRepo := repositories.NewProductRepository(db.GetConnection())
	materialRepo := repositories.NewMaterialRepository(db.GetConnection())

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (—Å–ª–æ–π –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏)
	productUseCase := usecases.NewProductUseCase(productRepo, materialRepo)
	materialUseCase := usecases.NewMaterialUseCase(materialRepo)
	calculatorUseCase := usecases.NewCalculatorUseCase(materialRepo)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã (—Å–ª–æ–π –∞–¥–∞–ø—Ç–µ—Ä–æ–≤)
	productController := controllers.NewProductController(productUseCase, materialUseCase)
	materialController := controllers.NewMaterialController(materialUseCase)
	calculatorController := controllers.NewCalculatorController(calculatorUseCase, materialUseCase, productUseCase)

	// –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä Gin
	router := gin.Default()

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º CORS
	corsConfig := cors.DefaultConfig()
	corsConfig.AllowOrigins = []string{"*"}
	corsConfig.AllowMethods = []string{"GET", "POST", "PUT", "DELETE", "OPTIONS"}
	corsConfig.AllowHeaders = []string{"Origin", "Content-Type", "Authorization"}
	router.Use(cors.New(corsConfig))

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤ (–î–û –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤!)
	router.SetFuncMap(map[string]interface{}{
		"add": func(a, b int) int {
			return a + b
		},
		"sub": func(a, b int) int {
			return a - b
		},
		"mul": func(a, b float64) float64 {
			return a * b
		},
		"div": func(a, b float64) float64 {
			if b == 0 {
				return 0
			}
			return a / b
		},
	})

	// –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω—ã
	router.LoadHTMLGlob("templates/*.html")

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
	router.Static("/static", "./static")

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã (—Å–ª–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã)
	server.SetupRoutes(router, productController, calculatorController, materialController)

	// –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
	srv := &http.Server{
		Addr:         fmt.Sprintf("%s:%s", cfg.Server.Host, cfg.Server.Port),
		Handler:      router,
		ReadTimeout:  10 * time.Second,
		WriteTimeout: 10 * time.Second,
		IdleTimeout:  30 * time.Second,
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –≥–æ—Ä—É—Ç–∏–Ω–µ
	go func() {
		sugar.Infow("–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞", "address", srv.Addr)
		if err := srv.ListenAndServe(); err != nil && !errors.Is(err, http.ErrServerClosed) {
			sugar.Fatalw("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞", "error", err)
		}
	}()

	// –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ
	printBanner(cfg)

	// –û–∂–∏–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è graceful shutdown
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit

	sugar.Info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä...")

	// Graceful shutdown
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	if err := srv.Shutdown(ctx); err != nil {
		sugar.Fatalw("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–µ—Ä–∞", "error", err)
	}

	sugar.Info("–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
}

// printBanner –≤—ã–≤–æ–¥–∏—Ç –±–∞–Ω–Ω–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
func printBanner(cfg *config.Config) {
	banner := fmt.Sprintf(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë               Wallpaper System v2.0                      ‚ïë
‚ïë              –ß–∏—Å—Ç–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞                           ‚ïë
‚ïë                  –û–∫—Ä—É–∂–µ–Ω–∏–µ: %s                      ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üè≠ –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ–º –æ–±–æ–µ–≤ "–ù–∞—à –¥–µ–∫–æ—Ä"
üåê –ê–¥—Ä–µ—Å: http://%s:%s
üìä –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Å–ª–æ–∏:
   ‚Ä¢ Domain Layer        - –ë–∏–∑–Ω–µ—Å-—Å—É—â–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–∞–≤–∏–ª–∞
   ‚Ä¢ Use Cases Layer     - –í–∞—Ä–∏–∞–Ω—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
   ‚Ä¢ Interface Adapters  - –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏  
   ‚Ä¢ Infrastructure      - –í–µ–±, –ë–î, –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:
   ‚Ä¢ GET  /                          - –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
   ‚Ä¢ GET  /products                  - –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ü–∏–∏
   ‚Ä¢ GET  /products/:id              - –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–¥—É–∫—Ü–∏–∏
   ‚Ä¢ GET  /calculator                - –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
   ‚Ä¢ POST /calculator                - –†–∞—Å—á–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
   ‚Ä¢ API  /api/v1/products           - REST API –ø—Ä–æ–¥—É–∫—Ü–∏–∏
   ‚Ä¢ API  /api/v1/calculator         - REST API –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞

`,
		os.Getenv("APP_ENV"),
		cfg.Server.Host,
		cfg.Server.Port,
	)

	fmt.Print(banner)
}
